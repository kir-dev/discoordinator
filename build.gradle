import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.21'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.8.21'
    id 'com.bmuschko.docker-remote-api' version '7.0.0'
}

group = 'hu.kirdev'
version = '1.0.1'

java {
    sourceCompatibility = '17'
}

bootJar {
    archiveFileName = 'discoordinator.jar'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    implementation 'com.discord4j:discord4j-core:3.2.4'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn assemble

    images = ['harbor.sch.bme.hu/org-golyakorte/discoordinator']
    inputDir = project.file('./')
    dockerFile = project.file('./Dockerfile')
}


task pushDockerImage(type: DockerPushImage) {
    dependsOn buildDockerImage

    registryCredentials {
        url = 'harbor.sch.bme.hu'
    }

    images = ['harbor.sch.bme.hu/org-golyakorte/discoordinator:latest']
}